package QI::Assets;

use strict;
use warnings;
no warnings qw(redefine);

use base 'QI::Base';

use Readonly;
use Date::Manip;
use QI::Schema;
use Switch;
use Data::Dumper;

use vars qw/$TAG $JSACTION $FIELD $VALUE $MACRO $TAGFIELDS @WANT @NOCOPY/;

sub assets_POST : Runmode {
	my $self = shift;

	my $VALID_FIELD = join '|', map { /(.*?)_id$/?($1,$_):$_ } $self->schema->source("Assets")->columns;
	$TAG = qr/^\d{6}([A-Z]{1})$/;
	$JSACTION = qr/^QIJ_(\w+)$/;
	$FIELD = qr/^QIF_($VALID_FIELD)(:(\w*))?$/i;
	$VALUE = qr/^QIV_(\w+)$/i;
	$MACRO = qr/^QIM_(\w+)$/i;
	$TAGFIELDS = qr/^(tag|parenttag)$/;
	@WANT = qw/customer_id received customer_tag serial_number manufacturer model location_id asset_type_id/;
	@NOCOPY = qw/customer_tag serial_number customer_use_only buyer_id sold_via_id shipped sale_price related_expenses billed customer_paid paid parenttag sold comments/;

	$self->get_record;
	$self->process_barcode;
	$self->return_records;
}

################################

sub warn_session {
	my $self = shift;
	no warnings;
	warn "------------------\n" unless $self->{__QI_WARN};
	warn join(' -=- ', ($_[0]||''), ++$self->{__QI_WARN}, 'input->'.$self->query->param('input'), 'tag->'.($self->session->param('record')?$self->session->param('record')->tag:''), 'cell->'.$self->session->param('field').'='.$self->session->param('value')), "\n";
}

sub get_record {
	my $self = shift;
	if ( $self->query->param('input') && $self->query->param('input') =~ $TAG ) {
		switch ( $1 ) {
			case 'Y' {
				$self->query->param(input => $self->schema->resultset("BarcodeMap")->find($self->query->param('input'))->map);
			}
			else {
				$self->query->param(input => $self->generate_tag) if $self->query->param('input') eq '000000Z';
				if ( !$self->session->param('field') || $self->session->param('field') !~ $TAGFIELDS ) {
					# Start of a new record
					$self->session->clear([qw/field value/]);
					if ( my $record = $self->schema->resultset("Assets")->find({tag => $self->query->param('input')}) ) {
						$self->session->param(record => $record);
					} else {
						if ( my $record = $self->session->param('record') ) {
							# Copy previous record and use
							$self->session->param(
								record => $self->schema->resultset("Assets")->find({tag => $record->tag})
									  ->copy({tag => $self->query->param('input'), map { $_=>undef } @NOCOPY})
							);
						} else {
							# Create a new record
							$self->session->param(record => $self->schema->resultset("Assets")->create({tag => $self->query->param('input')}));
						}
					}
				}
			}
		}
	}
	$self->reset unless $self->session->param('record');
}

sub generate_tag {
	my $self = shift;
	my @tags = sort { $a <=> $b } map { $_->tag =~ /^(\d+)Z$/ } $self->schema->resultset("Assets")->search({tag => {like => '%Z'}});
	my $tag = sprintf("%06dZ", ++$tags[$#tags]);
	$self->warn_session($tag);
	return $tag;
}

sub process_barcode {
	my $self = shift;
	return unless $self->session->param('record') && $self->query->param('input');
$self->warn_session("P1");
	$self->autofield(1);
$self->warn_session("P2");
	if ( $self->query->param('input') =~ $FIELD ) {
$self->warn_session("P2.1");
		$self->session->param(field => $1);
		$self->session->param(value => $3);
	} elsif ( $self->query->param('input') =~ $JSACTION ) {
$self->warn_session("P2.2");
		switch ( $1 ) {
			case 'reset' {
				$self->reset;
			}
			case 'cancel' {
				$self->clear;
			}
		}
	} elsif ( $self->query->param('input') =~ $TAG && $self->session->param('field') && $self->session->param('field') =~ $TAGFIELDS ) {
$self->warn_session("P2.3");
		$self->session->param(value => $self->query->param('input'));
	} elsif ( $self->query->param('input') !~ $TAG ) {
$self->warn_session("P2.4");
		$self->session->param(value => $self->query->param('input'));
	} else {
		$self->warn_session("P2.5");
	}
$self->warn_session("P3");
	$self->reset if $self->session->param('field') && $self->session->param('field') eq 'tag';
	$self->deflate_macro;
	$self->deflate_value;
	$self->update_record;
$self->warn_session("P4");
	$self->autofield;
$self->warn_session("P5");
}

sub deflate_macro {
	my $self = shift;
	return unless $self->session->param('record') && $self->session->param('value');
	return unless $self->session->param('value') =~ $MACRO;
	switch ( $1 ) {
		#case 'tag' {
		#	($field, $tag) = ('tag', $value);
		#}
		case 'green' {
			$self->session->param(value => '');
		}
		case 'red' {
			$self->session->param(value => "\0");
		}
	}
}

sub deflate_value {
	my $self = shift;
	return unless $self->session->param('record') && $self->session->param('value');
	return unless $self->session->param('value') =~ $VALUE;
	switch ( $1 ) {
		#case 'tag' {
		#	($field, $tag) = ('tag', $value);
		#}
		case 'empty' {
			$self->session->param(value => '');
		}
		case 'null' {
			$self->session->param(value => "\0");
		}
		case 'now' {
			$self->session->param(value => UnixDate(ParseDate('now'), '%Y-%m-%d %H:%M:%S'));
		}
		case /^plus(\d+)$/ {
			$self->session->param(value => $1);
		}
		case /^minus(\d+)$/ {
			$self->session->param(value => -1*$1);
		}
	}
}

sub update_record {
	my $self = shift;
	return unless $self->session->param('record');
	my $record = $self->schema->resultset("Assets")->find({tag => $self->session->param('record')->tag});
	my $field = $self->session->param('field');
	my $value = $self->session->param('value');
	return unless $field && defined $value;
	$record->$field($value eq "\0" ? undef : $value);
	$record->update;
	$self->session->param(record => $record);
	$self->session->clear([qw/field value/]);
}

sub autofield {
	my $self = shift;
	return unless $self->session->param('record');
	if ( defined $_[0] ) {
		$self->session->param(autofield => $_[0]);
	} else {
		return if $self->session->param('field') || !$self->session->param('autofield');
		my $record = $self->session->param('record');
		$self->session->param(field => $_) and last foreach grep { !$record->$_ } @WANT;
		$self->session->param(autofield => 0);
	}
}

sub clean_session {
	my $self = shift;
	unless ( $self->session->param('record') ) {
		$self->autofield(0);
		$self->session->clear('field');
	}
	$self->session->clear('value');
}

sub reset {
	my $self = shift;
	$self->autofield(0);
	$self->session->clear([qw/record field value/]);
}

sub clear {
	my $self = shift;
	$self->autofield(0);
	$self->session->clear([qw/field value/]);
}

sub return_records {
	my $self = shift;
	$self->clean_session;
	my @records = ();
	my ($k, $v);
	if ( my $record = $self->session->param('record') ) {
		push @records, $self->schema->resultset("Assets")->find({tag => $record->tag});
	} else {
		push @records, {};
	}
	foreach my $recent ( $self->schema->resultset("RecentAssets")->all ) {
		next unless defined $recent;
		push @records, $self->schema->resultset("Assets")->find({tag => $recent->tag});
	}
	#return $self->to_json({tag=>($self->session->param('record')?$self->session->param('record')->tag:undef), field=>$self->session->param('field'), records=>[@records]});
	return $self->json_xs->convert_blessed->encode({tag=>($self->session->param('record')?$self->session->param('record')->tag:undef), field=>$self->session->param('field'), records=>[@records]});
}

1;
